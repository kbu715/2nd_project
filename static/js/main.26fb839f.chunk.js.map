{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialLogin","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","src","width","height","alt","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","tweetArray","docs","map","marginTop","key","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","AppRouter","isLoggedIn","Fragment","maxWidth","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26fb839f.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\"; //firebase 데이터 베이스 사용 준비\r\nimport \"firebase/storage\";\r\n// Your web app's Firebase configuration\r\n\r\n// 리액트에서는 환경변수를 정의할 때 REACT_APP_ 을 반드시 앞에 써줘야한다.\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  //   types of Auth state persistence\r\n\r\n  // 'local' : 브라우저를 닫더라도 사용자 정보는 기억될 것이다.\r\n\r\n  // 'session' : 브라우저가 열려있는 동안에는 사용자 정보를 기억하는 것을 의미\r\n\r\n  // 'none' : 유저를 기억하지 않는다.\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let data;\r\n    try {\r\n      if (newAccount) {\r\n        //create account\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          //On successful creation of the user account, this user will also be signed in to your application. 자동 로그인이 될것이다!\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        //log in\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  const toggleNewAccount = () => {\r\n    setNewAccount((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input type=\"submit\" className=\"authInput authSubmit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n      {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleNewAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { authService, firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n  const onSocialLogin = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialLogin} name=\"google\" className=\"authBtn\">\r\n          Continue with Google\r\n          <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialLogin} name=\"github\" className=\"authBtn\">\r\n          Continue with Github\r\n          <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false); //tweet을 수정하고 있는지 아닌지를 뜻한다.\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text); //input의 값을 수정 할 수 있다.\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"이 tweet을 삭제하시겠습니까?\");\r\n    if (ok) {\r\n      //delete tweet\r\n      await dbService.doc(`datas/${tweetObj.id}`).delete();\r\n      if (tweetObj.attachmentUrl !== \"\") {\r\n        await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n      }\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(tweetObj, newTweet);\r\n    await dbService.doc(`datas/${tweetObj.id}`).update({\r\n      text: newTweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTweet(value);\r\n  };\r\n  return (\r\n    <div className=\"tweet\">\r\n      {editing ? (\r\n        <>\r\n          {isOwner && (\r\n            <>\r\n              <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Edit your Tweet\"\r\n                  value={newTweet}\r\n                  autoFocus\r\n                  onChange={onChange}\r\n                  required\r\n                  className=\"formInput\"\r\n                />\r\n                <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\" />\r\n              </form>\r\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                Cancel\r\n              </span>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{tweetObj.text}</h4>\r\n          {tweetObj.attachmentUrl && (\r\n            <img\r\n              src={tweetObj.attachmentUrl}\r\n              width=\"50px\"\r\n              height=\"50px\"\r\n              alt=\"img\"\r\n            />\r\n          )}\r\n          {isOwner && (\r\n            <div className=\"tweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService, dbService } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n  const [tweet, setTweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const onSubmit = async (event) => {\r\n    if (tweet === \"\") {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      //첨부파일이 있는경우!!!\r\n      //child()는 collection() 이랑 비슷\r\n      //npm install uuid : uuid는 기본적으로 어떤 특별한 식별자를 랜덤으로 제공\r\n\r\n      // 1. 먼저 파일에 대한 레퍼런스를 만든다.\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      //2. 그런다음 파일 데이터를 레퍼런스로 보낸다. putstring 사용 : putString(url, type)\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    const tweetObj = {\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid, //uid: user id\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"datas\").add(tweetObj);\r\n    setTweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    //FileReader api를 사용해 file 이름을 읽는다.\r\n    const reader = new FileReader(); //FileReader mdn 참고\r\n    reader.onloadend = (finishedEvent) => {\r\n      //Event Listener이다. 파일로딩이 끝나면 finishedEvent를 갖게 된다.\r\n      // console.log(finishedEvent);\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); // 그다음에 readAsDataURL 을 실행한다.\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={tweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{ opacity: 0 }}\r\n      />\r\n\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{ backgroundImage: attachment }}\r\n            alt=\"attachment\"\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\nexport default TweetFactory;\r\n","import Tweet from \"components/Tweet\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  //< 이 방법은 구식이다 >\r\n\r\n  // const getTweets = async () => {\r\n  //   const dbTweets = await dbService.collection(\"datas\").get();\r\n  //   dbTweets.forEach((document) => {\r\n  //     const tweetObject = {\r\n  //       ...document.data(),\r\n  //       id: document.id,\r\n  //     };\r\n  //     setTweets((prev) => [tweetObject, ...prev]);\r\n  //   });\r\n  // };\r\n\r\n  const getTweets = () => {\r\n    //이 방식이 forEach 방법보다 덜 re-render 하게 함으로써 더빠르게 실행되도록 한다.\r\n    //onsnapshot 은 기본적으로 데이터베이스에 무슨일이 있을 때, 알림을 받는다.\r\n    dbService.collection(\"datas\").orderBy(\"createdAt\", \"desc\").onSnapshot(  (snapshot) => {\r\n      const tweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setTweets(tweetArray);\r\n\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTweets();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid}\r\n          /> //tweet을 만든사람과 user가 같으면 true\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n      <li>\r\n        <Link to=\"/\" style={{ marginRight: 30 }}>\r\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link\r\n          to=\"/profile\"\r\n          style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}의 Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const history = useHistory();\r\n\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser(); //react.js에 있는 user정보를 새로고침 해준다.\r\n    }\r\n  };\r\n  // const getMyTweets = async () => {\r\n  //   const tweets = await dbService\r\n  //     .collection(\"datas\")\r\n  //     .where(\"creatorId\", \"==\", userObj.uid)\r\n  //     .orderBy(\"createdAt\")\r\n  //     .get();\r\n  //     console.log(tweets.docs.map(doc => doc.data()));\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   getMyTweets();\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Display Name\"\r\n          autoFocus\r\n          value={newDisplayName}\r\n          onChange={onChange}\r\n          className=\"formInput\"\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{ marginTop: 10 }} />\r\n      </form>\r\n      <span onClick={onLogOutClick} className=\"formBtn cancelBtn logOut\">Log Out</span>\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        <React.Fragment>\r\n        {/* Switch는 한번에 하나의 Route만 볼수 있게 해준다 */}\r\n        {isLoggedIn ? (\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: \"100%\",\r\n              margin: \"0 auto\",\r\n              marginTop: 80,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            {/* <Redirect from='*' to='/' />  */}\r\n            {/* 어떤 주소든 '/'로 이동 */}\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n            {/* <Redirect from='*' to='/' /> */}\r\n          </>\r\n        )}\r\n        </React.Fragment>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AppRouter from \"components/Router\";\r\nimport { authService } from \"fbase\";\r\n\r\nfunction App() {\r\n  //어플리케이션이 시작되면 바로 로그아웃 되버림. (firebase가 초기화되고 모든걸 로드할때까지 기다려줄 시간이 없다.)\r\n  // const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);  //authService.currentUser이 처음에 null 값이다\r\n\r\n  // 그래서 이렇게\r\n  const [init, setInit] = useState(false);\r\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userObj, setUserObj] = useState(null);\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      // onAuthStateChanged : //사용자의 로그인 상태의 변화를 관찰하는 관찰자를 추가시킨다\r\n      //유저 상태의 변화가 있을 때 알아차린다. 무슨 뜻이냐, 유저가 로그아웃 할 때, 로그인할때, 계정을 생성할 때도, firebase가 초기화될 때도 발생\r\n      if (user) {\r\n        // setIsLoggedIn(true);\r\n        setUserObj({\r\n          displayName: user.displayName,\r\n          uid: user.uid,\r\n          updateProfile: (args) => user.updateProfile(args), //이 function은 리턴값으로 우리한테 진짜 user.updateProfile을 준다.\r\n        });\r\n      } else {\r\n        setUserObj(null);\r\n        // setIsLoggedIn(false);\r\n      }\r\n      setInit(true);\r\n    });\r\n  }, []);\r\n\r\n  const refreshUser = () => {\r\n    const user = authService.currentUser;\r\n    // user를 새로고침하는 역할\r\n    setUserObj({\r\n      displayName: user.displayName,\r\n      uid: user.uid,\r\n      updateProfile: (args) => user.updateProfile(args),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {init ? (\r\n        <AppRouter\r\n          refreshUser={refreshUser}\r\n          isLoggedIn={Boolean(userObj)}\r\n          userObj={userObj}\r\n        />\r\n      ) : (\r\n        \"Initializing....\"\r\n      )}\r\n      <footer className=\"footer\">&copy; {new Date().getFullYear()} Twitter</footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"components/App\";\r\nimport \"./styles.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}